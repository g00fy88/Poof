@using Poof.Demand.Snaps.Quest
@using Poof.Talk.Snaps.User.Discovery
@using Yaapii.Atoms.Text
@using Yaapii.Atoms.Map
@using Yaapii.Atoms.Enumerable

<div class="details">
    @if(!showFinishSequence)
    {
        @if(!showFinishDialog && pictureUrl != "")
        {
            <div class="header">
                <img src="@pictureUrl" />
                <div class="overlay"></div>
                <div class="title">@Details.Value("title")</div>
            </div>
        }
        else
        {
            <div class="title">@Details.Value("title")</div>
        }
    }
    <div class="content">
        @if(showFinishSequence)
        {
            <div class="gratulations">Herzlichen Glückwunsch!</div>
            <div class="activity @Visibility()">
                <ActivityLevel Level=currentLevel Progress=currentProgress Background="#222"></ActivityLevel>
            </div>
        }
        else if(showFinishDialog)
        {
            <div class="finishing">
                Toll, dass du bereit bist deinen Quest abzuschließen. 
                Schreibe in einem kurzen Satz auf, wo du warst und was du dafür gemacht hast, 
                um dir deine Belohnung abzuholen.
            </div>
            <div class="note">
                <textarea maxlength=400 @oninput="@(async ui => await UpdateNote(ui.Value.ToString()))"></textarea>
            </div>
            <div class="buttons">
                <div class="cancel" @onclick="Close">Abbrechen</div>
                <div class="@ButtonClass()" @onclick="Finish">Bestätigen</div>
            </div>
        }
        else if(confirmationNeeded)
        {
            <div class="confirmation">
                Bist du dir sicher? Du hast @RemainingTime() Zeit, um diesen Quest abzuschließen.
                Solltest du das nicht schaffen, kann dies einen negativen Einfluss auf deine Stufenpunkte haben.
            </div>
            <div class="buttons">
                <div class="cancel" @onclick="Close">Nein, lieber doch nicht</div>
                <div class="apply" @onclick="ConfirmQuest">Ja, Quest annehmen</div>
            </div>
        }
        else
        {
            <div class="time">Quest läuft ab in @TimeRemaining</div>
            <div class="category">
                <span class="oi @Icon()"></span>
                <span>@CategoryText()</span>
            </div>
            <div class="reward">
                <p>Belohnung:</p>
                <div class="details">
                    <span class="icon-tribe-icon-37"></span>
                    <a>@Reward</a>
                </div>
                <div class="details">
                    <span class="icon-award-icon-11"></span>
                    <a>@Score</a>
                </div>
            </div>
            <div class="description">@Details.Value("description")</div>
            @if(new BoolOf(Details.Value("location.has")).Value())
            {
                <div class="additional">
                    <h3>Standort des Quests</h3>
                    <div class="text">@Details.Value("location.value")</div>
                </div>
            }
            @if(new BoolOf(Details.Value("contact.has")).Value())
            {
                <div class="additional">
                    <h3>Kontaktinfos <a style="font-size:0.6em">(werden erst nach Annahme des Quests angezeigt)</a></h3>
                    <div class="text">@Details.Value("contact.value")</div>
                </div>
            }
            @if(Details.Value("status") != "open")
            {
                <div class="questlog">
                    <h3>Quest-Log</h3>
                    @if(new BoolOf(Details.Value("applicant.me")).Value())
                    {
                        <div class="logcontent">
                            |<br>
                            |<br>
                            <p>Du hast diesen Quest angenommen</p>
                        </div>
                    }
                    @if(Details.Value("status") == "finished")
                    {
                        <div class="logcontent">
                            |<br>
                            |<br>
                            <p>Dieser Quest ist abgeschlossen mit der Notiz: </p>
                            <p>"@Details.Value("note")"</p>
                        </div>
                    }
                </div>
            }
            <div class="buttons">
                <div class="cancel" @onclick="Close">Abbrechen</div>
                @if(AsPreview)
                {
                    <div class="apply" @onclick="Create">Quest erstellen</div>
                }
                else if(!new BoolOf(Details.Value("issuer.me")).Value())
                {
                    if (Details.Value("status") == "open")
                    {
                        <div class="apply" @onclick="Apply">Quest annehmen</div>
                    }
                    else if(Details.Value("status") == "pending")
                    {
                        <div class="apply" @onclick="StartFinish">Quest abschließen</div>
                    }
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public IJSON Details { get; set; }
    [Parameter]
    public string Reward { get; set; }
    [Parameter]
    public string Score { get; set; }
    [Parameter]
    public string TimeRemaining { get; set; }
    [Parameter]
    public IApi Server { get; set; }
    [Parameter]
    public bool AsPreview { get; set; } = false;
    [Parameter]
    public EventCallback Cancel { get; set; }
    [Parameter]
    public EventCallback FinishView { get; set; }

    private bool confirmationNeeded = false;
    private bool showFinishDialog = false;
    private string questNote = "";
    private bool showFinishSequence = false;
    private bool showActivity = false;
    private int currentLevel;
    private double currentProgress;
    private string pictureUrl = "";

    protected override async Task OnInitializedAsync()
    {
        if(new BoolOf(Details.Value("picture.has")).Value())
        {
            this.pictureUrl =
                new AwGetPicture.Url(
                    await Server.Private(
                        new DmGetPicture(Details.Value("id")),
                        ""
                    ).Content()
                ).AsString();
        }
        await base.OnInitializedAsync();
    }

    private string Icon()
    {
        return 
            new FallbackMap(
                new MapOf(
                    "solidarity", "icon-teamwork-icon-37",
                    "community", "icon-friends-icon-png-19",
                    "sustainability", "icon-sustainability-icon-3_1"
                ),
                key => "icon-scroll-icon-29263"
            )[Details.Value("category")];
    }

    private string CategoryText()
    {
        return 
            new FallbackMap(
                new MapOf(
                    "solidarity", "Solidarität",
                    "community", "Gemeinschaft",
                    "sustainability", "Ökologische Nachhaltigkeit"
                ),
                key => "Sonstige"
            )[Details.Value("category")];
    }

    private string RemainingTime()
    {
        var timeLeft = TimeSpan.FromHours(new IntOf(Details.Value("completionTime")).Value());
        var result = "";
        if (timeLeft.Days > 0)
        {
            result = $"{timeLeft.Days} Tage und ";
        }
        result += $"{timeLeft.Hours} Stunden";
        return result;
    }

    private async Task UpdateNote(string value)
    {
        this.questNote = value;
        StateHasChanged();
    }

    private string ButtonClass()
    {
        return this.questNote == "" ? "disabled" : "apply";
    }

    private string Visibility()
    {
        return this.showActivity ? "show" : "hide";
    }

    private Task Close()
    {
        return this.Cancel.InvokeAsync();
    }

    private void Apply()
    {
        this.confirmationNeeded = true;
        StateHasChanged();
    }

    private async Task ConfirmQuest()
    {
        await Server.Private(new DmAddApplicant(Details.Value("id")), "").Touch();
        await this.FinishView.InvokeAsync();
    }

    private void StartFinish()
    {
        this.showFinishDialog = true;
        StateHasChanged();
    }

    private async Task Create()
    {
        await this.FinishView.InvokeAsync();
    }

    private async Task Finish()
    {
        this.showFinishSequence = true;
        StateHasChanged();
        var details = await Server.Private(new DmGetDetails(), "").Content();
        this.currentLevel = new AwGetDetails.Level(details).Value();
        this.currentProgress =
            100.0 * new AwGetDetails.ScoreProgress(details).Value() /
                    new AwGetDetails.ScoreNeeded(details).Value();

        this.showActivity = true;
        StateHasChanged();
        await Server.Private(new DmFinishQuest(Details.Value("id"), this.questNote), "json").Touch();
        details = await Server.Private(new DmGetDetails(), "").Content();
        var start = this.currentLevel + this.currentProgress / 100;
        var end = new AwGetDetails.Level(details).Value() + new AwGetDetails.ScoreProgress(details).Value() / new AwGetDetails.ScoreNeeded(details).Value();;

        var step = (end - start) / 100;
        for(int i = 1; i<=100; i++)
        {
            var current = start + step * i;
            this.currentLevel = (int)current;
            this.currentProgress = (current % 1) * 100;
            StateHasChanged();
            await Task.Delay(20);
        }

        await Task.Delay(1000);
        await FinishView.InvokeAsync();
    }
}
