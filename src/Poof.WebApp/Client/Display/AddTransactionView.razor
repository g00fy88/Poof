@using Microsoft.AspNetCore.Authorization
@using Poof.Talk.Snaps.User.Discovery
@using Yaapii.Atoms.Text
@attribute [Authorize]
@inject IApi api

@if (currentStep == "chooseUser")
{
    <p>Gib den Namen der Person ein, an die du Punkte senden möchtest.</p>
    <FindUserView TakeFactor=TakeFactor GiveFactor=GiveFactor Friends=Friends Select=@SelectUser></FindUserView>
}
@if (currentStep == "choosePoints")
{
    <div class="pointadd">
        <p>Ich möchte Punkte an <span class="name">@selectedPseudonym</span><span class="number">#@selectedPseudonumber.ToString("0000")</span> senden</p>
        <div class="pointinput">
            <p>@pointValue.ToString("0.00")</p>
            <input type="number" min="0" @oninput="@(async ui => await UpdatePoints(ui.Value.ToString()))" />
        </div>
        <div class="titleinput">
            <input type="text" placeholder="Titel deiner Transaktion" @bind="title" @bind:event="oninput"/>
        </div>
        <div class="confirm">
            <div class="button @((pointValue > 0 && title != "") ? "":"disabled")" @onclick="ConfirmTransaction">Transaktion ausführen</div>
        </div>
    </div>
}
@if (currentStep == "spinning")
{

}
@if (currentStep == "confirmation")
{
    <div style="padding: 20px">Transaktion wurde erfolgreich ausgeführt</div>
}
@if (currentStep == "error")
{
    <div>Etwas ist schiefgelaufen. Bitte schließe dieses Fenster und versuche es erneut.</div>
}

@code {
    [Parameter]
    public EventCallback OnSuccess { get; set; }
    [Parameter]
    public double TakeFactor { get; set; }
    [Parameter]
    public double GiveFactor { get; set; }
    [Parameter]
    public IList<IJSON> Friends { get; set; }

    private string currentStep;
    private string selectedUserId;
    private string selectedPseudonym;
    private int selectedPseudonumber;
    private double selectedValue;
    private double pointValue;
    private string title;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.currentStep = "chooseUser";
        this.selectedUserId = "";
        this.selectedPseudonym = "";
        this.selectedPseudonumber = 0;
        this.selectedValue = 0;
        this.pointValue = 0;
        this.title = "";
    }

    private void SelectUser(IJSON node)
    {
        this.selectedUserId = node.Value("id");
        this.selectedPseudonym = node.Value("pseudonym");
        this.selectedPseudonumber = new IntOf(node.Value("pseudonumber")).Value();
        this.currentStep = "choosePoints";
    }

    private async Task UpdatePoints(string value)
    {
        if (value == "")
            value = "0";
        var pointNumber = new IntOf(value.Replace(",", "").Replace(".", "")).Value();
        this.pointValue = Math.Abs(pointNumber / 100.0);
        StateHasChanged();
    }

    private async Task ConfirmTransaction()
    {
        if (this.title != "" && this.pointValue > 0)
        {
            this.currentStep = "spinning";
            StateHasChanged();

            // await add transaction
            this.currentStep = "confirmation";
            StateHasChanged();
            await OnSuccess.InvokeAsync();
        }
    }
}
