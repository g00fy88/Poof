@using Microsoft.AspNetCore.Authorization
@using Poof.Talk.Snaps.User.Discovery
@using Yaapii.Atoms.Text
@attribute [Authorize]
@inject IApi api

@if (currentStep == "chooseUser")
{
    <div class="nameInput">
        <p>Gib den Namen der Person ein, an die du Punkte senden möchtest.</p>
        <input type="text" @oninput="@(async ui => await UpdateNameList(ui.Value.ToString()))" />
    </div>
    <div class="nameList">
        @if (showSpinner)
        {
            <div class="spinner-border"></div>
        }
        else
        {
            @if (names.Count == 0)
            {
                <div>Keine übereinstimmenden Namen gefunden...</div>
            }
            else
            {
                @foreach (var name in names)
                {
                    <div class="candidate" @onclick="() => SelectUser(name)">
                        <div class="actor">
                            <span class="oi oi-person"></span>
                            <div class="score">@(new DoubleOf(name.Value("score")).Value().ToString("F0"))</div>
                        </div>
                        <div class="name">
                            <span class="text">@name.Value("pseudonym")</span><span class="number">#@(new IntOf(name.Value("pseudonumber")).Value().ToString("0000"))</span>
                        </div>
                        <div class="factor ttip">
                            <span class="ttext">Balance-Faktor</span>
                            <img src="./images/Waage_0.png" />
                            <div class="value">@FactorString(new DoubleOf(name.Value("givefactor")).Value())</div>
                        </div>
                    </div>
                }
            }
        }
    </div>
}
@if (currentStep == "choosePoints")
{
    <div>Choose the points!</div>
}

@code {
    [Parameter]
    public double TakeFactor { get; set; }
    [Parameter]
    public IList<IJSON> Friends { get; set; }

    private CancellationTokenSource tokenSource;
    private bool showSpinner = false;
    private string currentStep;
    private IList<IJSON> names;
    private string selectedUserId;
    private string selectedPseudonym;
    private int selectedPseudonumber;
    private double selectedValue;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.currentStep = "chooseUser";
        this.names = new List<IJSON>();
        this.tokenSource = new CancellationTokenSource();
        this.names = Friends;
        this.selectedUserId = "";
        this.selectedPseudonym = "";
        this.selectedPseudonumber = 0;
        this.selectedValue = 0;
    }

    private async Task UpdateNameList(string value)
    {
        this.tokenSource.Cancel();

        if (value == "")
        {
            this.names = Friends;
        }
        else
        {
            this.tokenSource = new CancellationTokenSource();
            var token = this.tokenSource.Token;
            await Task.Delay(600);
            if (!token.IsCancellationRequested)
            {
                this.showSpinner = true;
                StateHasChanged();

                this.names =
                    new AwFindByName.List(
                        await api.Private(new DmFindByName(value), "").Content()
                    );

                this.showSpinner = false;
                StateHasChanged();
            }
        }
    }

    private string FactorString(double giveFactor)
    {
        return (giveFactor + TakeFactor).ToString("0.00");
    }

    private void SelectUser(IJSON node)
    {
        this.selectedUserId = node.Value("id");
        this.selectedPseudonym = node.Value("pseudonym");
        this.selectedPseudonumber = new IntOf(node.Value("pseudonumber")).Value();
        this.currentStep = "choosePoints";
    }
    }
