@page "/newquest"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Poof.Demand.Snaps.Quest
@using Poof.Talk.Snaps.User.Discovery
@using Poof.WebApp.Client.Display
@using System.Globalization
@using System.ComponentModel.DataAnnotations
@using Yaapii.Atoms.IO
@using Yaapii.Atoms.Scalar
@using Yaapii.Atoms.Text
@using Yaapii.Atoms.Map
@using Yaapii.Atoms.Enumerable
@attribute [Authorize]
@inject IApi api
@inject IMemory mem

<div class="content">
    <div class="header">
        <p>Erstelle einen eigenen Quest, den andere User annehmen und abschließen können. Vergebe Punkte als Belohnung.
            Nach Abschluss des Quests werden diese Punkte von deinem Konto abgezogen und dem Quest-User gutgeschrieben.
        </p>
    </div>
    <div class="form">
        @if (view == "confirm")
        {
            <div class="confirm">
                <p>Herzlichen Glückwunsch, du hast einen Quest erstellt.</p>
                <p>Du kannst den Status deines Quests in der Übersicht ansehen.</p>
            </div>
        }
        else if(view == "preview")
        {
            <QuestDetails 
                Details="@(new JSONOf(previewToken))"
                Reward="@(new TextOf(questForm.Reward).AsString())"
                Score="@(new TextOf(questForm.Reward).AsString())"
                TimeRemaining="@RemainingTime()"
                AsPreview="true"
                Server="@(new LocalApi(new JObject(new JProperty("url", questForm.PictureUrl))))"
                Cancel="@(()=>{view = "form";})"
                FinishView="CreateQuest"
            ></QuestDetails>
        }
        else
        {
        <EditForm Model="@questForm" OnValidSubmit="@Preview">
            <div style="text-align:left">
                <DataAnnotationsValidator />
                <ValidationSummary />
            </div>
            <div class="picture">
                @if(questForm.Picture.Length > 0)
                {
                    <img src="@questForm.PictureUrl" />
                    <div class="overlay"></div>
                }
                <div class="upload">
                    <span class="oi oi-image"></span> <a>Bild hochladen</a>
                    <InputFile OnChange="@EditPicture" accept="image/x-png,image/jpeg" style="position: absolute;top: 0;right: 0;width: 100%;height: 100%;opacity: 0;cursor:pointer;"></InputFile>
                </div>
                <div class="title">
                    <InputText placeholder="Titel" class="title" @bind-Value="@questForm.Title"></InputText>
                </div>
            </div>
            <div class="details">
                <div class="category">
                    <InputRadioGroup @bind-Value="@questForm.Category">
                        <div>
                          <InputRadio Value='"community"' id="community"></InputRadio>
                          <label for="community"><span class="icon-friends-icon-png-19"></span> Gemeinschaft</label>
                        </div>
                        <div>
                          <InputRadio Value='"solidarity"' id="solidarity"></InputRadio>
                          <label for="solidarity"><span class="icon-teamwork-icon-37"></span> Solidarität</label>
                        </div>
                        <div>
                          <InputRadio Value='"sustainability"' id="sustainability"></InputRadio>
                          <label for="sustainability"><span class="icon-sustainability-icon-3_1"></span> Ökologische Nachhaltigkeit</label>
                        </div>
                        <div>
                            <InputRadio Value='"other"' id="other"></InputRadio>
                            <label for="other"><span class="icon-scroll-icon-29263"></span> Sonstige</label>
                        </div>
                    </InputRadioGroup>
                </div>
                <div class="reward">
                    <p>Belohnung: </p>
                    <InputNumber @bind-Value="@questForm.Reward" style="width:100px"></InputNumber>
                </div>
                <div class="endDate">
                    <p>Quest läuft aus am:</p>
                    <InputDate @bind-Value="@questForm.EndDate"></InputDate>
                </div>
                <div class="reward">
                    <p>Zeit für die Ausführung des Quests: </p>
                    <InputNumber @bind-Value="@questForm.CompletionDays" style="width:60px"></InputNumber> Tage
                </div>
                <div class="description">
                    <InputTextArea @bind-Value="@questForm.Description" placeholder="Beschreibe, worum es in dem Quest geht und was getan werden muss, um ihn abzuschließen"></InputTextArea>
                </div>
                <div class="location">
                    <div class="selector">
                        <InputCheckbox id="loc" @bind-Value="@questForm.NeedsLocation"></InputCheckbox>
                        <label for="loc">Standort <a>(bei standortgebundenen Quests)</a></label>
                    </div>
                    @if(questForm.NeedsLocation)
                    {
                        <InputTextArea @bind-Value="@questForm.Location" placeholder="Wenn der Quest standortgebunden ist, beschreibe den Ort oder gib eine Addresse oder Standort-Link ein. Achtung, diese Info kann von allen Usern eingesehen werden! Gebe hier keine privaten Addressen ein."></InputTextArea>
                    }
                </div>
                <div class="contact">
                    <div class="selector">
                        <InputCheckbox id="con" @bind-Value="@questForm.NeedsContact"></InputCheckbox>
                        <label for="con">Kontakt <a>(wenn Kontaktaufnahme erwünscht)</a></label>
                    </div>
                    @if(questForm.NeedsContact)
                    {
                        <InputTextArea @bind-Value="@questForm.Contact" placeholder="Wenn eine Kontaktaufnahme notwendig ist, gebe hier ein, wie du am besten zu erreichen bist (Email, Telefonnummer, etc.). Diese Info wird nur dem User angezeigt, der den Quest angenommen hat."></InputTextArea>
                    }
                </div>
            </div>
            <div class="buttons">
                <NavLink href="quests">
                    <div class="cancel">Abbrechen</div>
                </NavLink>
                <button type="submit">zur Vorschau</button>
                @if(loading)
                {
                    <div style="position:absolute; top:21px;">
                        <div class="loader"></div>
                    </div>
                }
            </div>
        </EditForm>
        }
    </div>
</div>

@code {
    private Quest questForm = new Quest();

    private bool loading = false;
    private string view = "form";
    private JObject previewToken = new JObject();

    protected override void OnInitialized()
    { }

    private async Task EditPicture(InputFileChangeEventArgs e)
    {
        if (e.GetMultipleFiles().Count > 0)
        {
            var file = e.File;
            var format = "image/jpg";
            var resizedImageFile = await file.RequestImageFileAsync(format, 1600, 900);
            this.questForm.Picture = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream(5242880).ReadAsync(this.questForm.Picture);
            this.questForm.PictureUrl = "data:image/png;base64," + Convert.ToBase64String(this.questForm.Picture);
        }
        StateHasChanged();
    }

    private async Task Preview()
    {
        this.loading = true;
        await Task.Delay(1);
        this.previewToken =
            new JObject(
                new JProperty("id", "123-id"),
                new JProperty("scope", "public"),
                new JProperty("status", "open"),
                new JProperty("issuer",
                    new JObject(
                        new JProperty("me", true),
                        new JProperty("name", "")
                    )
                ),
                new JProperty("applicant",
                    new JObject(
                        new JProperty("has", false),
                        new JProperty("me", false),
                        new JProperty("name", ""),
                        new JProperty("startDate", "")
                    )
                ),
                new JProperty("completionTime", new TextOf(questForm.CompletionDays * 24).AsString()),
                new JProperty("reward", new TextOf(questForm.Reward).AsString()),
                new JProperty("factor", "0.5"),
                new JProperty("category", questForm.Category),
                new JProperty("title", questForm.Title),
                new JProperty("description", questForm.Description),
                new JProperty("note", ""),
                new JProperty("endDate",
                    new JObject(
                        new JProperty("has", true),
                        new JProperty("value", questForm.EndDate.ToString(CultureInfo.InvariantCulture)
                        )
                    )
                ),
                new JProperty("location",
                    new JObject(
                        new JProperty("has", questForm.NeedsLocation),
                        new JProperty("value", questForm.Location)
                    )
                ),
                    new JProperty("contact",
                    new JObject(
                        new JProperty("has", questForm.NeedsContact),
                        new JProperty("value", questForm.Contact)
                    )
                ),
                new JProperty("picture",
                    new JObject(
                        new JProperty("has", questForm.Picture.Length > 0)
                    )
                )
            );
        this.view = "preview";
        this.loading = false;
        await InvokeAsync(StateHasChanged);
    }

    private string RemainingTime()
    {
        var timeLeft = TimeSpan.FromDays(this.questForm.CompletionDays);
        var result = "";
        if(timeLeft.Days > 0)
        {
            result = $"{timeLeft.Days}T ";
        }
        result += $"{timeLeft.Hours.ToString("00")}:{timeLeft.Minutes.ToString("00")}:{timeLeft.Seconds.ToString("00")}";
        return result;
    }

    private async Task CreateQuest()
    {
        var id =
            new AwCreateQuest.Id(
                await this.api.Private(
                    new DmCreateQuest(
                        "public",
                        this.questForm.Category,
                        this.questForm.Title,
                        this.questForm.Description,
                        this.questForm.Reward,
                        this.questForm.EndDate,
                        TimeSpan.FromDays(this.questForm.CompletionDays).TotalHours,
                        this.questForm.NeedsLocation,
                        this.questForm.Location,
                        this.questForm.NeedsContact,
                        this.questForm.Contact
                    ),
                    "json"
                ).Content()
            ).AsString();

        if(this.questForm.Picture.Length > 0)
        {
            await this.api.Private(
                new DmUpdatePicture(id, new InputOf(this.questForm.Picture)),
                "raw"
            ).Touch();
        }
        this.view = "confirm";
        StateHasChanged();
    }

    public class Quest
    {
        public byte[] Picture { get; set; } = new byte[0];
        public string PictureUrl { get; set; } = "";

        [Required(ErrorMessage = "Ein Titel ist erforderlich")]
        [StringLength(100, MinimumLength = 1)]
        public string Title { get; set; }

        public DateTime EndDate { get; set; } = DateTime.Now.AddDays(7);

        [Required]
        [Range(1, 50, ErrorMessage = "Die Ausführungszeit muss zwischen 1 und 50 Tagen liegen")]
        public double CompletionDays { get; set; }

        public string Category { get; set; } = "community";
        public double Reward { get; set; }

        [Required(ErrorMessage = "Eine Beschreibung ist erforderlich")]
        public string Description { get; set; }

        public bool NeedsLocation { get; set; } = false;
        public string Location { get; set; } = "";
        public bool NeedsContact { get; set; } = false;
        public string Contact { get; set; } = "";
    }
}
