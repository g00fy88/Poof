@page "/quests"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Poof.Demand.Snaps.Quest
@using Poof.Talk.Snaps.User.Discovery
@using Poof.WebApp.Client.Display
@using System.Globalization
@using Yaapii.Atoms.Scalar
@using Yaapii.Atoms.Text
@using Yaapii.Atoms.Map
@using Yaapii.Atoms.Enumerable
@attribute [Authorize]
@inject IApi api
@inject IMemory mem

<div class="content">
    <div class="options">
        <NavLink href="newquest">
            <div class="add-new item">
                <span class="one icon-scroll-icon-29263"></span>
                <span class="two oi oi-plus"></span>
            </div>
        </NavLink>
        <AnchorLink href="#mypending">
            <div class="jump item" >
                <span class="one icon-user-account-icon-10"></span>
                <span class="two icon-scroll-icon-29263"></span>
                <span class="three oi oi-star"></span>
            </div>
        </AnchorLink>
        <AnchorLink href="#mycreated">
            <div class="jump item">
                <span class="one icon-user-account-icon-10"></span>
                <span class="two icon-scroll-icon-29263"></span>
                <span class="three oi oi-plus"></span>
            </div>
        </AnchorLink>
        <AnchorLink href="#myfinished">
            <div class="jump item ">
                <span class="one icon-user-account-icon-10"></span>
                <span class="two icon-scroll-icon-29263"></span>
                <span class="three oi oi-check"></span>
            </div>
        </AnchorLink>
    </div>
    <div class="questbox container">
        <p>7-Tage-Rotation</p>
        @foreach(var quest in Weeklies())
        {
            var id = quest.Value("id");
            <QuestCard 
                Id=@id
                Category=@quest.Value("category")
                Status=@quest.Value("status")
                Title=@quest.Value("title")
                Reward="-"
                Score=@Score(quest.Value("reward"), quest.Value("factor"))
                NeedsLocation=@(new BoolOf(quest.Value("location.has")).Value())
                NeedsContact=@(new BoolOf(quest.Value("contact.has")).Value())
                HasPicture=@(new BoolOf(quest.Value("picture.has")).Value())
                TimeRemaining=@Counter(id)
                Open=OpenQuestDialog
            ></QuestCard>
        }
    </div>
    <div class="questbox container" id="mypending">
        <p>Offene User-Quests</p>
        @foreach(var quest in OpenQuests())
        {
            var id = quest.Value("id");
            <QuestCard 
                Id=@id
                Category=@quest.Value("category")
                Status=@quest.Value("status")
                Title=@quest.Value("title")
                Reward=@Reward(quest.Value("reward"), quest.Value("scope"))
                Score=@Score(quest.Value("reward"), quest.Value("factor"))
                NeedsLocation=@(new BoolOf(quest.Value("location.has")).Value())
                NeedsContact=@(new BoolOf(quest.Value("contact.has")).Value())
                HasPicture=@(new BoolOf(quest.Value("picture.has")).Value())
                TimeRemaining=@Counter(id)
                Open=OpenQuestDialog
            ></QuestCard>
        }
    </div>
    <div class="questbox container" id="mypending">
        <p>Meine laufenden Quests</p>
        @foreach(var quest in UserQuests())
        {
            var id = quest.Value("id");
            <QuestCard 
                Id=@id
                Category=@quest.Value("category")
                Status=@quest.Value("status")
                Title=@quest.Value("title")
                Reward=@Reward(quest.Value("reward"), quest.Value("scope"))
                Score=@Score(quest.Value("reward"), quest.Value("factor"))
                NeedsLocation=@(new BoolOf(quest.Value("location.has")).Value())
                NeedsContact=@(new BoolOf(quest.Value("contact.has")).Value())
                HasPicture=@(new BoolOf(quest.Value("picture.has")).Value())
                TimeRemaining=@Counter(id)
                Open=OpenQuestDialog
            ></QuestCard>
        }
    </div>
    <div class="questbox container" id="mycreated">
        <p>Meine erstellten Quests</p>
        @foreach(var quest in CreatedQuests())
        {
            var id = quest.Value("id");
            <QuestCard 
                Id=@id
                Category=@quest.Value("category")
                Status=@quest.Value("status")
                Title=@quest.Value("title")
                Reward=@Reward(quest.Value("reward"), quest.Value("scope"))
                Score=@Score(quest.Value("reward"), quest.Value("factor"))
                NeedsLocation=@(new BoolOf(quest.Value("location.has")).Value())
                NeedsContact=@(new BoolOf(quest.Value("contact.has")).Value())
                HasPicture=@(new BoolOf(quest.Value("picture.has")).Value())
                TimeRemaining=@Counter(id)
                Open=OpenQuestDialog
            ></QuestCard>
        }
    </div>
    <div class="questbox container" id="myfinished">
        <p>Meine abgeschlossenen Quests</p>
        @foreach(var quest in FinishedQuests())
        {
            var id = quest.Value("id");
            <QuestCard 
                Id=@id
                Category=@quest.Value("category")
                Status=@quest.Value("status")
                Title=@quest.Value("title")
                Reward=@Reward(quest.Value("reward"), quest.Value("scope"))
                Score=@Score(quest.Value("reward"), quest.Value("factor"))
                NeedsLocation=@(new BoolOf(quest.Value("location.has")).Value())
                NeedsContact=@(new BoolOf(quest.Value("contact.has")).Value())
                HasPicture=@(new BoolOf(quest.Value("picture.has")).Value())
                TimeRemaining=@Counter(id)
                Open=OpenQuestDialog
            ></QuestCard>
        }
    </div>
</div>

@if (showQuestDialogOpen && selectedQuestId != "")
{
    <ModalDialog OnClose="@CancelQuestDialog" MaxWidth="800px">
        <Content>
            <QuestDetails
                Details=@SelectedQuest() 
                Reward=@Reward()
                Score=@Score() 
                TimeRemaining=@Counter(selectedQuestId) 
                Server=api
                Cancel=CancelQuestDialog
                FinishView=RefreshAndCloseQuestDialog>
            </QuestDetails>
        </Content>
    </ModalDialog>
}

@code {
    private IList<IJSON> quests = new List<IJSON>();
    private IDictionary<string, int> counters = new Dictionary<string, int>();
    private double giveFactor = 0.5;
    private System.Timers.Timer timer;
    private bool showQuestDialogOpen = false;
    private string selectedQuestId = "";

    protected override void OnInitialized()
    {
        this.timer = new System.Timers.Timer(1000);
        this.timer.Elapsed += CountClocks;
        this.timer.Enabled = true;
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        this.giveFactor = new AwGetDetails.GiveFactor(await api.Private(new DmGetDetails(), "").Content()).Value();
        this.quests = new JSONOf((await api.Private(new DmGetCatalog(), "").Content()).Result()).Nodes("[*]");
        foreach(var quest in quests)
        {
            if (quest.Value("status") == "open" && new BoolOf(quest.Value("endDate.has")).Value())
            {
                var id = quest.Value("id");
                var date = DateTime.Parse(quest.Value("endDate.value"), CultureInfo.InvariantCulture);
                this.counters[id] = (int)(date.Subtract(DateTime.Now).TotalSeconds);
            }
            else if(quest.Value("status") == "pending")
            {
                var id = quest.Value("id");
                var date =
                    DateTime.Parse(quest.Value("applicant.startDate"), CultureInfo.InvariantCulture)
                    .Add(TimeSpan.FromHours(new IntOf(quest.Value("completionTime")).Value()));
                this.counters[id] = (int)(date.Subtract(DateTime.Now).TotalSeconds);
            }
        }
    }

    public void CountClocks(Object source, System.Timers.ElapsedEventArgs e)
    {
        var allFinished = true;
        foreach(var id in this.counters.Keys)
        {
            if(this.counters[id] > 0)
            {
                this.counters[id] -= 1;
                allFinished = false;
            }
        }
        if(allFinished)
        {
            this.timer.Enabled = false;
        }
        InvokeAsync(() => StateHasChanged());
    }

    private IEnumerable<IJSON> Weeklies()
    {
        return
            new Filtered<IJSON>(quest =>
                quest.Value("scope") == "private" &&
                quest.Value("status") == "open",
                this.quests
            );
    }

    private IEnumerable<IJSON> OpenQuests()
    {
        return
            new Filtered<IJSON>(quest =>
                quest.Value("scope") != "private" &&
                quest.Value("status") == "open" &&
                !new BoolOf(quest.Value("issuer.me")).Value(),
                this.quests
            );
    }

    private IEnumerable<IJSON> UserQuests()
    {
        return
            new Filtered<IJSON>(quest =>
                quest.Value("status") == "pending" &&
                new BoolOf(quest.Value("applicant.me")).Value(),
                this.quests
            );
    }

    private IEnumerable<IJSON> CreatedQuests()
    {
        return
            new Filtered<IJSON>(quest =>
                quest.Value("scope") != "private" &&
                new BoolOf(quest.Value("issuer.me")).Value(),
                this.quests
            );
    }

    private IEnumerable<IJSON> FinishedQuests()
    {
        return
            new Filtered<IJSON>(quest =>
                quest.Value("status") == "finished" &&
                new BoolOf(quest.Value("applicant.me")).Value(),
                this.quests
            );
    }

    private string Counter(string id)
    {
        var result = "-";
        if(this.counters.ContainsKey(id) && this.counters[id] > 0)
        {
            var timeLeft = TimeSpan.FromSeconds(this.counters[id]);
            result = "";
            if(timeLeft.Days > 0)
            {
                result = $"{timeLeft.Days}T ";
            }
            result += $"{timeLeft.Hours.ToString("00")}:{timeLeft.Minutes.ToString("00")}:{timeLeft.Seconds.ToString("00")}";
        }
        return result;
    }

    private string Reward()
    {
        var node = SelectedQuest();
        return Reward(node.Value("reward"), node.Value("scope"));
    }

    private string Reward(string points, string scope)
    {
        var result = "-";
        if(scope != "private")
        {
            result = new DoubleOf(points).Value().ToString("F0");
        }
        return result;
    }

    private string Score()
    {
        var node = SelectedQuest();
        return Score(node.Value("reward"), node.Value("factor"));
    }

    private string Score(string points, string factor)
    {
        return (new DoubleOf(points).Value() * (new DoubleOf(factor).Value() + this.giveFactor)).ToString("F0");
    }

    private void OpenQuestDialog(string quest)
    {
        this.selectedQuestId = quest;
        this.showQuestDialogOpen = true;
        StateHasChanged();
    }

    private async Task RefreshAndCloseQuestDialog()
    {
        await Refresh();
        this.showQuestDialogOpen = false;
        StateHasChanged();
    }

    private void CancelQuestDialog()
    {
        this.showQuestDialogOpen = false;
        StateHasChanged();
    }

    private IJSON SelectedQuest()
    {
        return
            new FirstOf<IJSON>(
                quest => quest.Value("id") == this.selectedQuestId,
                this.quests
            ).Value();
    }
}
