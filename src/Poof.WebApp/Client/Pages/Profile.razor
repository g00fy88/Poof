@page "/profile"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Poof.Talk.Snaps.User.Configuration
@using Poof.Talk.Snaps.User.Discovery
@using Poof.WebApp.Client.Display
@using Yaapii.Atoms.Text
@attribute [Authorize]
@inject IApi api
@inject IMemory mem

<div class="content px-4">
    <div style="height:10px"></div>
    <ProfileView HasPicture="@hasPicture" ProfilePicture="@pictureUrl" Pseudonym=@pseudonym PseudoNumber=@pseudonumber OnRefresh="@RefreshDetails"></ProfileView>
    <div style="height: 50px"></div>
    <div class="centerparent">
        <div class="addfriend horizontalCentered" @onclick="@OpenAddFriendDialog">
            <span class="oi oi-plus"></span>
            <p>Fellow hinzufügen</p>
        </div>
    </div>
    <div style="height:80px"></div>
</div>
<div class="friends">
    <FriendsView Friends=@friends TakeFactor=@takeFactor GiveFactor=@giveFactor Confirm=@ConfirmFriend Remove=@RemoveFriend></FriendsView>
</div>

@if (addFriendDialogOpen)
{
    <ModalDialog OnClose="@CancelAddFriendDialog" MaxWidth="800px">
        <Content>
            <div style="padding:1rem">
                <p>Gib den Namen der Person ein, die du hinzufügen möchtest.</p>
                <FindUserView TakeFactor=takeFactor GiveFactor=giveFactor Friends=@(new List<IJSON>()) Select=@AddFriend></FindUserView>
            </div>
        </Content>
    </ModalDialog>
}

@code {
    private string pseudonym;
    private int pseudonumber;
    private bool hasPicture;
    private string pictureUrl;
    private double takeFactor;
    private double giveFactor;
    private IList<IJSON> friends = new List<IJSON>();
    private bool addFriendDialogOpen = false;

    protected override void OnInitialized()
    {
        this.pseudonym = mem.Prop("pseudonym", "");
        this.pseudonumber = new IntOf(mem.Prop("pseudonumber", "0")).Value();
        this.pictureUrl = mem.Prop("pictureUrl", "");
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshDetails();
    }

    private async Task RefreshDetails()
    {
        var response = await api.Private(new DmGetDetails(), "").Content();
        this.pseudonym = new AwGetDetails.PseudoName(response).AsString();
        this.pseudonumber = new AwGetDetails.PseudoNumber(response).Value();
        this.hasPicture = new AwGetDetails.HasPicture(response).Value();
        this.pictureUrl = new AwGetDetails.PictureUrl(response).AsString();
        this.takeFactor = new AwGetDetails.TakeFactor(response).Value();
        this.giveFactor = new AwGetDetails.GiveFactor(response).Value();

        mem.Update("pseudonym", this.pseudonym);
        mem.Update("pseudonumber", new TextOf(this.pseudonumber).AsString());
        mem.Update("pictureUrl", this.pictureUrl);

        this.friends = new AwGetFriends.List(await api.Private(new DmGetFriends(), "").Content());
        StateHasChanged();
    }

    private void OpenAddFriendDialog()
    {
        this.addFriendDialogOpen = true;
        StateHasChanged();
    }

    private void CancelAddFriendDialog()
    {
        this.addFriendDialogOpen = false;
    }

    private async Task AddFriend(IJSON user)
    {
        await api.Private(new DmAddFriend(user.Value("id")), "").Touch();
        await RefreshDetails();
        StateHasChanged();
        this.addFriendDialogOpen = false;
    }

    private async Task ConfirmFriend(string id)
    {
        await api.Private(new DmConfirmFriend(id), "").Touch();
        await RefreshDetails();
        StateHasChanged();
    }

    private async Task RemoveFriend(string id)
    {
        await api.Private(new DmRemoveFriend(id), "").Touch();
        await RefreshDetails();
        StateHasChanged();
    }
}
