@page "/main"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Poof.Talk.Snaps.Transaction
@using Poof.Talk.Snaps.User.Discovery
@using Poof.WebApp.Client.Display
@attribute [Authorize]
@inject IApi api

<div class="content px-4">
    <div style="height:10px"></div>
    <PointView Points=userPoints ActivityScore=userScore></PointView>
    <div style="height: 50px"></div>
    <div class="centerparent">
        <div class="addtransaction horizontalCentered" @onclick="@OpenAddTransactionDialog">
            <span class="oi oi-plus"></span>
            <p>Transaktion hinzufügen</p>
        </div>
    </div>
    <div style="height:80px"></div>
</div>
<div class="transactions">
    <TransactionView Transactions=@transactions></TransactionView>
</div>

@if (addTransactionDialogOpen)
{
    <ModalDialog OnClose="@CancelAddTransactionDialog" MaxWidth="800px">
        <Content>
            <AddTransactionView Friends=friends TakeFactor=userTakeFactor GiveFactor=userGiveFactor OnSuccess="@UpdateTransactions"></AddTransactionView>
        </Content>
    </ModalDialog>
}

@code {
    private IList<IJSON> transactions = new List<IJSON>();
    private IList<IJSON> friends = new List<IJSON>();
    private double userPoints;
    private double userTakeFactor;
    private double userGiveFactor;
    private double userScore;
    private bool addTransactionDialogOpen = false;

    protected override async Task OnInitializedAsync()
    {
        await UpdateTransactions();

        api.AddStatusAction("transaction", UpdateTransactions);

        this.friends = new AwGetFriends.List(await api.Private(new DmGetFriends(), "").Content());
    }

    private void OpenAddTransactionDialog()
    {
        this.addTransactionDialogOpen = true;
        StateHasChanged();
    }

    private void CancelAddTransactionDialog()
    {
        this.addTransactionDialogOpen = false;
    }

    private async Task UpdateTransactions()
    {
        this.transactions =
            new JSONOf(
                (await api.Private(new DmGetUserTransactions(), "").Content()).Result()
            ).Nodes("[*]");

        var response = await api.Private(new DmGetDetails(), "").Content();
        this.userPoints = new AwGetDetails.Points(response).Value();
        this.userScore = new AwGetDetails.Score(response).Value();
        this.userTakeFactor = new AwGetDetails.TakeFactor(response).Value();
        this.userGiveFactor = new AwGetDetails.GiveFactor(response).Value();

        this.addTransactionDialogOpen = false;
        StateHasChanged();
    }
}
